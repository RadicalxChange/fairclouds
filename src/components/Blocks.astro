---
const { content } = Astro.props;
---

<div class="space-y-8">
  {
    (() => {
      const elements = [];
      let i = 0;

      while (i < content.length) {
        const block = content[i];

        switch (block.type) {
          case "paragraph":
            elements.push(<p set:html={block.data.text} />);
            i++;
            break;
          case "header":
            switch (block.data.level) {
              case 1:
                elements.push(<h1>{block.data.text}</h1>);
                break;
              case 2:
                elements.push(<h2>{block.data.text}</h2>);
                break;
              case 3:
                elements.push(<h3>{block.data.text}</h3>);
                break;
              case 4:
                elements.push(<h4>{block.data.text}</h4>);
                break;
              case 5:
                elements.push(<h5>{block.data.text}</h5>);
                break;
              case 6:
                elements.push(<h6>{block.data.text}</h6>);
                break;
              default:
                elements.push(<p set:html={block.data.text} />); // Fallback to paragraph if level is not valid
            }
            i++;
            break;
          case "quote":
            elements.push(
              <blockquote>
                <p set:html={block.data.text} />
                <footer>
                  â€”<cite>{block.data.caption}</cite>
                </footer>
              </blockquote>,
            );
            i++;
            break;
          case "image":
            elements.push(
              <img
                src={`https://cms.fairclouds.life/assets/${block.data.file.fileId}`}
                alt={block.data.caption}
              />,
            );
            i++;
            break;
          case "nestedlist":
            elements.push(
              <ul>
                {block.data.items.map((item) => (
                  <li set:html={item.content} />
                ))}
              </ul>,
            );
            i++;
            break;
          case "toggle":
            const itemsToInclude = block.data.items;
            const nextIndex = i + 1;
            const endIndex = nextIndex + itemsToInclude;
            const nestedContent = content.slice(nextIndex, endIndex);
            elements.push(
              <details class="group open:mb-32">
                <summary class="flex gap-4 items-center cursor-pointer group-open:mb-6">
                  {block.data.text}
                  <svg
                    class="group-open:rotate-180"
                    width="19"
                    height="12"
                    viewBox="0 0 19 12"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M2.23529 1.81139C2.23529 1.11106 1.7563 0.585804 1.11765 0.585804C0.478992 0.585804 2.98818e-07 1.11106 2.68206e-07 1.81139C2.37593e-07 2.51172 0.478992 3.03697 1.11765 3.03697C1.7563 2.86189 2.23529 2.33664 2.23529 1.81139ZM3.9916 3.56222C3.9916 2.86189 3.5126 2.33664 2.87395 2.33664C2.23529 2.33664 1.7563 2.86189 1.7563 3.56222C1.7563 4.26256 2.23529 4.7878 2.87395 4.7878C3.5126 4.78781 3.9916 4.26256 3.9916 3.56222ZM10.6975 10.9157L10.6975 10.2154C10.8571 10.3905 11.0168 10.3905 11.1765 10.3905C11.8151 10.3905 12.2941 9.86522 12.2941 9.16489L12.2941 8.46455C12.4538 8.63964 12.6134 8.63964 12.7731 8.63964C13.4118 8.63964 13.8908 8.11439 13.8908 7.41405L13.8908 6.71372C14.0504 6.8888 14.2101 6.88881 14.3697 6.88881C15.0084 6.88881 15.4874 6.36356 15.4874 5.66322C15.4874 4.96289 15.1681 4.26256 14.5294 4.26256C14.2101 4.26256 13.8908 4.26255 13.7311 4.61272C13.5714 4.26255 13.2521 4.26256 12.9328 4.26256C12.2941 4.26256 11.8151 4.7878 11.8151 5.48814L11.8151 6.18847C11.6555 6.01339 11.3361 6.01339 11.1765 6.01339C10.5378 6.01339 10.0588 6.53864 10.0588 7.23897L10.0588 8.11439C9.89916 7.93931 9.7395 7.76422 9.57983 7.76422C9.42017 7.76422 9.10084 7.76422 8.94118 7.93931L8.94118 7.06389C8.94118 6.53864 8.46218 6.01339 7.82353 6.01339C7.66387 6.01339 7.34454 6.01339 7.18487 6.18847L7.18487 5.48814C7.34454 4.7878 6.86555 4.26255 6.22689 4.26255C5.90756 4.26255 5.58823 4.43764 5.42857 4.61272C5.10924 4.26255 4.78991 4.26255 4.47059 4.26255C3.83193 4.26255 3.35294 4.7878 3.35294 5.48814C3.35294 6.18847 3.83193 6.71372 4.47059 6.71372C4.63025 6.71372 4.94958 6.71372 5.10924 6.53864L5.10924 7.23897C5.10924 7.93931 5.58823 8.46455 6.22689 8.46455C6.38655 8.46455 6.70588 8.28947 6.86555 8.28947L6.86555 8.98981C6.86555 9.69014 7.34454 10.2154 7.98319 10.2154C8.14286 10.2154 8.46218 10.0403 8.62185 10.0403L8.62185 10.7406C8.62185 11.441 9.10084 11.9662 9.73949 11.9662C10.0588 12.1413 10.6975 11.6161 10.6975 10.9157ZM16.2857 2.33664C15.6471 2.33664 15.1681 2.86189 15.1681 3.56222C15.1681 4.26256 15.6471 4.78781 16.2857 4.78781C16.9244 4.78781 17.4034 4.26256 17.4034 3.56222C17.4034 2.86189 16.9244 2.33664 16.2857 2.33664ZM16.7647 1.81139C16.7647 2.51172 17.2437 3.03697 17.8824 3.03697C18.521 3.03697 19 2.51172 19 1.81139C19 1.11106 18.521 0.585805 17.8824 0.585805C17.2437 0.410721 16.7647 1.11106 16.7647 1.81139Z"
                      fill="black"
                    />
                  </svg>
                </summary>
                <Astro.self content={nestedContent} />
              </details>,
            );
            i = endIndex; // Skip the indices that are included in the toggle
            break;
          // Add more cases as needed for different types of content
          default:
            elements.push(null); // Return null or an appropriate fallback for unknown types
            i++;
        }
      }

      return elements;
    })()
  }
</div>
