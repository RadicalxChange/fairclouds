---
import Draw from "./Draw.svelte";

// dont prerender this component as we need to get fresh data from the api.
export const prerender = false;

// Map settings

// const polygons = await directus.request(
// 	readItems("polygons", {
// 		fields: ["id", "location", "price", { licenses: ["id"] }],
// 	}),
// );

// const drawings = await directus.request(
// 	readItems("drawings", {
// 		fields: ["id", "name", "location", "artist_credit", "image"],
// 	}),
// );

// intersection of a point with drawing polygons
// const intersects = await directus.request(
// 	readItems("drawings", {
// 		fields: ["*"],
// 		filter: {
// 			area: {
// 				_intersects: {
// 					type: "Feature",
// 					properties: {},
// 					geometry: {
// 						coordinates: [-66.09679179594478, -23.722487874932185],
// 						type: "Point",
// 					},
// 				},
// 			},
// 		},
// 	}),
// );

// intersection of a polygon with drawing polygons
// const response = await directus.items("Land").readByQuery({
// 	limit: 100,
// 	fields: ["id", "name", "center", "geometry"],
// 	filter: {
// 		center: {
// 			_intersects: {
// 				type: "Feature",
// 				geometry: {
// 					coordinates: [
// 						[
// 							[168.2947501099543, -17.723682144590242],
// 							[168.2947501099543, -17.727328428851507],
// 							[168.29840874403044, -17.727328428851507],
// 							[168.29840874403044, -17.723682144590242],
// 							[168.2947501099543, -17.723682144590242],
// 						],
// 					],
// 					type: "Polygon",
// 				},
// 			},
// 		},
// 	},
// });
---

<div
	class="w-full h-screen flex flex-col bg-blue-100 items-center justify-center relative"
>
	<div class="w-full h-full" id="map">
		<button
			class="absolute bottom-[26px] left-[27px] z-20 shadow-cloud rounded-full w-8 h-8 flex justify-center items-center"
			id="zoomOutButton"><img src="/icons/minus.svg" /></button
		>
		<button
			class="absolute bottom-[26px] left-[244px] z-20 shadow-cloud rounded-full w-8 h-8 flex justify-center items-center"
			id="zoomInButton"><img src="/icons/plus.svg" /></button
		>
	</div>
	<div class="flex absolute right-0 bottom-0 w-full gap-4 p-4">
		<div class="w-[270px]"></div>
		<div
			class="bg-primary rounded-full grow shadow-cloud flex justify-center items-center relative"
		>
			<span class="opacity-50">Timeline</span>
			<div
				class="absolute left-1/4 flex justify-center items-center bg-white rounded-full border-primary border text-primary text-serif text-small h-7 w-7"
			>
				<span>C1</span>
			</div>
			<div class="absolute bg-white border-l border-white h-full left-24"></div>

			<div
				class="absolute left-6 flex justify-center items-center bg-white rounded-full border-primary border text-primary text-serif text-small h-7 w-7"
			>
				<span>C3</span>
			</div>
			<div
				class="absolute left-8 flex justify-center items-center bg-white rounded-full border-primary border text-primary text-serif text-small h-7 w-7"
			>
				<span>C2</span>
			</div>
		</div>
		<Draw client:only />
		<div
			class="shadow-cloud rounded-full w-11 h-11 flex justify-center items-center"
		>
			<svg
				width="21"
				height="24"
				viewBox="0 0 21 24"
				fill="none"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					d="M6.20059 4.7C6.8081 4.7 7.30059 4.20751 7.30059 3.6C7.30059 2.99249 6.8081 2.5 6.20059 2.5C5.59307 2.5 5.10059 2.99249 5.10059 3.6C5.10059 4.20751 5.59307 4.7 6.20059 4.7Z"
					fill="white"></path>
				<path
					d="M6.00039 6.7C6.6079 6.7 7.10039 6.20751 7.10039 5.6C7.10039 4.99249 6.6079 4.5 6.00039 4.5C5.39288 4.5 4.90039 4.99249 4.90039 5.6C4.90039 6.20751 5.39288 6.7 6.00039 6.7Z"
					fill="white"></path>
				<path
					d="M14.1 6.60039C14.7075 6.60039 15.2 6.1079 15.2 5.50039C15.2 4.89288 14.7075 4.40039 14.1 4.40039C13.4925 4.40039 13 4.89288 13 5.50039C13 6.1079 13.4925 6.60039 14.1 6.60039Z"
					fill="white"></path>
				<path
					d="M13.9008 4.7C14.5083 4.7 15.0008 4.20751 15.0008 3.6C15.0008 2.99249 14.5083 2.5 13.9008 2.5C13.2933 2.5 12.8008 2.99249 12.8008 3.6C12.8008 4.20751 13.2933 4.7 13.9008 4.7Z"
					fill="white"></path>
				<path
					d="M12.8002 3.10039C13.4077 3.10039 13.9002 2.6079 13.9002 2.00039C13.9002 1.39288 13.4077 0.900391 12.8002 0.900391C12.1927 0.900391 11.7002 1.39288 11.7002 2.00039C11.7002 2.6079 12.1927 3.10039 12.8002 3.10039Z"
					fill="white"></path>
				<path
					d="M11.0004 2.2C11.6079 2.2 12.1004 1.70751 12.1004 1.1C12.1004 0.492487 11.6079 0 11.0004 0C10.3929 0 9.90039 0.492487 9.90039 1.1C9.90039 1.70751 10.3929 2.2 11.0004 2.2Z"
					fill="white"></path>
				<path
					d="M9.1 2.2C9.70751 2.2 10.2 1.70751 10.2 1.1C10.2 0.492487 9.70751 0 9.1 0C8.49249 0 8 0.492487 8 1.1C8 1.70751 8.49249 2.2 9.1 2.2Z"
					fill="white"></path>
				<path
					d="M7.3002 3.10039C7.90771 3.10039 8.4002 2.6079 8.4002 2.00039C8.4002 1.39288 7.90771 0.900391 7.3002 0.900391C6.69268 0.900391 6.2002 1.39288 6.2002 2.00039C6.2002 2.6079 6.69268 3.10039 7.3002 3.10039Z"
					fill="white"></path>
				<path
					d="M1.1 7.9998C1.70751 7.9998 2.2 7.50732 2.2 6.8998C2.2 6.29229 1.70751 5.7998 1.1 5.7998C0.492487 5.7998 0 6.29229 0 6.8998C0 7.50732 0.492487 7.9998 1.1 7.9998Z"
					fill="white"></path>
				<path
					d="M3.1 7.9998C3.70751 7.9998 4.2 7.50732 4.2 6.8998C4.2 6.29229 3.70751 5.7998 3.1 5.7998C2.49249 5.7998 2 6.29229 2 6.8998C2 7.50732 2.49249 7.9998 3.1 7.9998Z"
					fill="white"></path>
				<path
					d="M5.1 7.9998C5.70751 7.9998 6.2 7.50732 6.2 6.8998C6.2 6.29229 5.70751 5.7998 5.1 5.7998C4.49249 5.7998 4 6.29229 4 6.8998C4 7.50732 4.49249 7.9998 5.1 7.9998Z"
					fill="white"></path>
				<path
					d="M7.1 7.9998C7.70751 7.9998 8.2 7.50732 8.2 6.8998C8.2 6.29229 7.70751 5.7998 7.1 5.7998C6.49249 5.7998 6 6.29229 6 6.8998C6 7.50732 6.49249 7.9998 7.1 7.9998Z"
					fill="white"></path>
				<path
					d="M9.1 7.9998C9.70751 7.9998 10.2 7.50732 10.2 6.8998C10.2 6.29229 9.70751 5.7998 9.1 5.7998C8.49249 5.7998 8 6.29229 8 6.8998C8 7.50732 8.49249 7.9998 9.1 7.9998Z"
					fill="white"></path>
				<path
					d="M11.1 7.9998C11.7075 7.9998 12.2 7.50732 12.2 6.8998C12.2 6.29229 11.7075 5.7998 11.1 5.7998C10.4925 5.7998 10 6.29229 10 6.8998C10 7.50732 10.4925 7.9998 11.1 7.9998Z"
					fill="white"></path>
				<path
					d="M13.1 7.9998C13.7075 7.9998 14.2 7.50732 14.2 6.8998C14.2 6.29229 13.7075 5.7998 13.1 5.7998C12.4925 5.7998 12 6.29229 12 6.8998C12 7.50732 12.4925 7.9998 13.1 7.9998Z"
					fill="white"></path>
				<path
					d="M15.1 7.9998C15.7075 7.9998 16.2 7.50732 16.2 6.8998C16.2 6.29229 15.7075 5.7998 15.1 5.7998C14.4925 5.7998 14 6.29229 14 6.8998C14 7.50732 14.4925 7.9998 15.1 7.9998Z"
					fill="white"></path>
				<path
					d="M17.1 7.9998C17.7075 7.9998 18.2 7.50732 18.2 6.8998C18.2 6.29229 17.7075 5.7998 17.1 5.7998C16.4925 5.7998 16 6.29229 16 6.8998C16 7.50732 16.4925 7.9998 17.1 7.9998Z"
					fill="white"></path>
				<path
					d="M19.1 7.9998C19.7075 7.9998 20.2 7.50732 20.2 6.8998C20.2 6.29229 19.7075 5.7998 19.1 5.7998C18.4925 5.7998 18 6.29229 18 6.8998C18 7.50732 18.4925 7.9998 19.1 7.9998Z"
					fill="white"></path>
				<path
					d="M1.1 9.9998C1.70751 9.9998 2.2 9.50732 2.2 8.8998C2.2 8.29229 1.70751 7.7998 1.1 7.7998C0.492487 7.7998 0 8.29229 0 8.8998C0 9.50732 0.492487 9.9998 1.1 9.9998Z"
					fill="white"></path>
				<path
					d="M1.1 11.9998C1.70751 11.9998 2.2 11.5073 2.2 10.8998C2.2 10.2923 1.70751 9.7998 1.1 9.7998C0.492487 9.7998 0 10.2923 0 10.8998C0 11.5073 0.492487 11.9998 1.1 11.9998Z"
					fill="white"></path>
				<path
					d="M1.1 13.9998C1.70751 13.9998 2.2 13.5073 2.2 12.8998C2.2 12.2923 1.70751 11.7998 1.1 11.7998C0.492487 11.7998 0 12.2923 0 12.8998C0 13.5073 0.492487 13.9998 1.1 13.9998Z"
					fill="white"></path>
				<path
					d="M1.1 15.9998C1.70751 15.9998 2.2 15.5073 2.2 14.8998C2.2 14.2923 1.70751 13.7998 1.1 13.7998C0.492487 13.7998 0 14.2923 0 14.8998C0 15.5073 0.492487 15.9998 1.1 15.9998Z"
					fill="white"></path>
				<path
					d="M1.1 17.9998C1.70751 17.9998 2.2 17.5073 2.2 16.8998C2.2 16.2923 1.70751 15.7998 1.1 15.7998C0.492487 15.7998 0 16.2923 0 16.8998C0 17.5073 0.492487 17.9998 1.1 17.9998Z"
					fill="white"></path>
				<path
					d="M1.1 19.9998C1.70751 19.9998 2.2 19.5073 2.2 18.8998C2.2 18.2923 1.70751 17.7998 1.1 17.7998C0.492487 17.7998 0 18.2923 0 18.8998C0 19.5073 0.492487 19.9998 1.1 19.9998Z"
					fill="white"></path>
				<path
					d="M1.1 21.9998C1.70751 21.9998 2.2 21.5073 2.2 20.8998C2.2 20.2923 1.70751 19.7998 1.1 19.7998C0.492487 19.7998 0 20.2923 0 20.8998C0 21.5073 0.492487 21.9998 1.1 21.9998Z"
					fill="white"></path>
				<path
					d="M1.1 23.9998C1.70751 23.9998 2.2 23.5073 2.2 22.8998C2.2 22.2923 1.70751 21.7998 1.1 21.7998C0.492487 21.7998 0 22.2923 0 22.8998C0 23.5073 0.492487 23.9998 1.1 23.9998Z"
					fill="white"></path>
				<path
					d="M19.1 7.9998C19.7075 7.9998 20.2 7.50732 20.2 6.8998C20.2 6.29229 19.7075 5.7998 19.1 5.7998C18.4925 5.7998 18 6.29229 18 6.8998C18 7.50732 18.4925 7.9998 19.1 7.9998Z"
					fill="white"></path>
				<path
					d="M19.1 7.9998C19.7075 7.9998 20.2 7.50732 20.2 6.8998C20.2 6.29229 19.7075 5.7998 19.1 5.7998C18.4925 5.7998 18 6.29229 18 6.8998C18 7.50732 18.4925 7.9998 19.1 7.9998Z"
					fill="white"></path>
				<path
					d="M19.1 9.9998C19.7075 9.9998 20.2 9.50732 20.2 8.8998C20.2 8.29229 19.7075 7.7998 19.1 7.7998C18.4925 7.7998 18 8.29229 18 8.8998C18 9.50732 18.4925 9.9998 19.1 9.9998Z"
					fill="white"></path>
				<path
					d="M19.1 11.9998C19.7075 11.9998 20.2 11.5073 20.2 10.8998C20.2 10.2923 19.7075 9.7998 19.1 9.7998C18.4925 9.7998 18 10.2923 18 10.8998C18 11.5073 18.4925 11.9998 19.1 11.9998Z"
					fill="white"></path>
				<path
					d="M19.1 13.9998C19.7075 13.9998 20.2 13.5073 20.2 12.8998C20.2 12.2923 19.7075 11.7998 19.1 11.7998C18.4925 11.7998 18 12.2923 18 12.8998C18 13.5073 18.4925 13.9998 19.1 13.9998Z"
					fill="white"></path>
				<path
					d="M19.1 15.9998C19.7075 15.9998 20.2 15.5073 20.2 14.8998C20.2 14.2923 19.7075 13.7998 19.1 13.7998C18.4925 13.7998 18 14.2923 18 14.8998C18 15.5073 18.4925 15.9998 19.1 15.9998Z"
					fill="white"></path>
				<path
					d="M19.1 17.9998C19.7075 17.9998 20.2 17.5073 20.2 16.8998C20.2 16.2923 19.7075 15.7998 19.1 15.7998C18.4925 15.7998 18 16.2923 18 16.8998C18 17.5073 18.4925 17.9998 19.1 17.9998Z"
					fill="white"></path>
				<path
					d="M19.1 19.9998C19.7075 19.9998 20.2 19.5073 20.2 18.8998C20.2 18.2923 19.7075 17.7998 19.1 17.7998C18.4925 17.7998 18 18.2923 18 18.8998C18 19.5073 18.4925 19.9998 19.1 19.9998Z"
					fill="white"></path>
				<path
					d="M19.1 21.9998C19.7075 21.9998 20.2 21.5073 20.2 20.8998C20.2 20.2923 19.7075 19.7998 19.1 19.7998C18.4925 19.7998 18 20.2923 18 20.8998C18 21.5073 18.4925 21.9998 19.1 21.9998Z"
					fill="white"></path>
				<path
					d="M19.1 23.9998C19.7075 23.9998 20.2 23.5073 20.2 22.8998C20.2 22.2923 19.7075 21.7998 19.1 21.7998C18.4925 21.7998 18 22.2923 18 22.8998C18 23.5073 18.4925 23.9998 19.1 23.9998Z"
					fill="white"></path>
				<path
					d="M19.1 23.9998C19.7075 23.9998 20.2 23.5073 20.2 22.8998C20.2 22.2923 19.7075 21.7998 19.1 21.7998C18.4925 21.7998 18 22.2923 18 22.8998C18 23.5073 18.4925 23.9998 19.1 23.9998Z"
					fill="white"></path>
				<path
					d="M3.1 23.9998C3.70751 23.9998 4.2 23.5073 4.2 22.8998C4.2 22.2923 3.70751 21.7998 3.1 21.7998C2.49249 21.7998 2 22.2923 2 22.8998C2 23.5073 2.49249 23.9998 3.1 23.9998Z"
					fill="white"></path>
				<path
					d="M5.1 23.9998C5.70751 23.9998 6.2 23.5073 6.2 22.8998C6.2 22.2923 5.70751 21.7998 5.1 21.7998C4.49249 21.7998 4 22.2923 4 22.8998C4 23.5073 4.49249 23.9998 5.1 23.9998Z"
					fill="white"></path>
				<path
					d="M7.1 23.9998C7.70751 23.9998 8.2 23.5073 8.2 22.8998C8.2 22.2923 7.70751 21.7998 7.1 21.7998C6.49249 21.7998 6 22.2923 6 22.8998C6 23.5073 6.49249 23.9998 7.1 23.9998Z"
					fill="white"></path>
				<path
					d="M9.1 23.9998C9.70751 23.9998 10.2 23.5073 10.2 22.8998C10.2 22.2923 9.70751 21.7998 9.1 21.7998C8.49249 21.7998 8 22.2923 8 22.8998C8 23.5073 8.49249 23.9998 9.1 23.9998Z"
					fill="white"></path>
				<path
					d="M11.1 23.9998C11.7075 23.9998 12.2 23.5073 12.2 22.8998C12.2 22.2923 11.7075 21.7998 11.1 21.7998C10.4925 21.7998 10 22.2923 10 22.8998C10 23.5073 10.4925 23.9998 11.1 23.9998Z"
					fill="white"></path>
				<path
					d="M13.1 23.9998C13.7075 23.9998 14.2 23.5073 14.2 22.8998C14.2 22.2923 13.7075 21.7998 13.1 21.7998C12.4925 21.7998 12 22.2923 12 22.8998C12 23.5073 12.4925 23.9998 13.1 23.9998Z"
					fill="white"></path>
				<path
					d="M15.1 23.9998C15.7075 23.9998 16.2 23.5073 16.2 22.8998C16.2 22.2923 15.7075 21.7998 15.1 21.7998C14.4925 21.7998 14 22.2923 14 22.8998C14 23.5073 14.4925 23.9998 15.1 23.9998Z"
					fill="white"></path>
				<path
					d="M17.1 23.9998C17.7075 23.9998 18.2 23.5073 18.2 22.8998C18.2 22.2923 17.7075 21.7998 17.1 21.7998C16.4925 21.7998 16 22.2923 16 22.8998C16 23.5073 16.4925 23.9998 17.1 23.9998Z"
					fill="white"></path>
				<path
					d="M19.1 23.9998C19.7075 23.9998 20.2 23.5073 20.2 22.8998C20.2 22.2923 19.7075 21.7998 19.1 21.7998C18.4925 21.7998 18 22.2923 18 22.8998C18 23.5073 18.4925 23.9998 19.1 23.9998Z"
					fill="white"></path>
			</svg>
		</div>
		<div
			class="shadow-cloud rounded-full w-11 h-11 flex justify-center items-center"
		>
			<svg
				width="33"
				height="19"
				viewBox="0 0 33 19"
				fill="none"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					d="M14.0974 3.63006C14.0974 2.83443 13.451 2.18798 12.6554 2.18798C12.2327 2.18798 11.81 2.33716 11.5365 2.66038C11.4868 2.56093 11.4868 2.56093 11.437 2.5112C11.7603 2.23771 11.9094 1.86475 11.9094 1.44208C11.9094 0.646448 11.263 0 10.4674 0H8.27939C7.48376 0 6.78759 0.646448 6.78759 1.44208C6.78759 1.86475 7.01136 2.23771 7.30972 2.5112C7.25999 2.56093 7.21027 2.61066 7.16054 2.66038C6.88704 2.33716 6.51409 2.18798 6.09141 2.18798C5.29578 2.18798 4.59961 2.83443 4.59961 3.63006C4.59961 4.42569 5.29578 5.07213 6.09141 5.07213C6.51409 5.07213 6.88704 4.92295 7.16054 4.59973C7.21027 4.64946 7.25999 4.69918 7.30972 4.74891C6.9865 5.02241 6.78759 5.39536 6.78759 5.81804C6.78759 6.61366 7.48376 7.30984 8.27939 7.30984H10.4674C11.263 7.30984 11.9094 6.61366 11.9094 5.81804C11.9094 5.39536 11.7603 5.02241 11.437 4.74891C11.4868 4.69918 11.4868 4.69918 11.5365 4.59973C11.81 4.92295 12.2327 5.07213 12.6554 5.07213C13.451 5.07213 14.0974 4.42569 14.0974 3.63006Z"
					fill="white"></path>
				<path
					d="M18.8965 14.5704C18.8965 15.366 19.5429 16.0125 20.3386 16.0125C20.7612 16.0125 21.1839 15.8633 21.4574 15.5401C21.5071 15.6395 21.5071 15.6395 21.5569 15.6893C21.2336 15.9628 21.0845 16.3357 21.0845 16.7584C21.0845 17.554 21.7309 18.2005 22.5265 18.2005H24.7145C25.5101 18.2005 26.2063 17.554 26.2063 16.7584C26.2063 16.3357 25.9826 15.9628 25.6842 15.6893C25.7339 15.6395 25.7836 15.5898 25.8334 15.5401C26.1069 15.8633 26.4798 16.0125 26.9025 16.0125C27.6981 16.0125 28.3943 15.366 28.3943 14.5704C28.3943 13.7748 27.6981 13.1283 26.9025 13.1283C26.4798 13.1283 26.1069 13.2775 25.8334 13.6007C25.7836 13.551 25.7339 13.5013 25.6842 13.4516C26.0074 13.1781 26.2063 12.8051 26.2063 12.3824C26.2063 11.5868 25.5101 10.8906 24.7145 10.8906H22.5265C21.7309 10.8906 21.0845 11.5868 21.0845 12.3824C21.0845 12.8051 21.2336 13.1781 21.5569 13.4516C21.5071 13.5013 21.5071 13.5013 21.4574 13.6007C21.1839 13.2775 20.7612 13.1283 20.3386 13.1283C19.5181 13.1283 18.8965 13.7748 18.8965 14.5704Z"
					fill="white"></path>
				<path
					d="M32.1235 4.50028H0.845356C0.372951 4.50028 0 4.12733 0 3.65493C0 3.18252 0.372951 2.80957 0.845356 2.80957H32.1235C32.5959 2.80957 32.9689 3.18252 32.9689 3.65493C32.9689 4.12733 32.5959 4.50028 32.1235 4.50028Z"
					fill="white"></path>
				<path
					d="M32.1235 15.3899H0.845356C0.372951 15.3899 0 15.017 0 14.5446C0 14.0722 0.372951 13.6992 0.845356 13.6992H32.1235C32.5959 13.6992 32.9689 14.0722 32.9689 14.5446C32.9689 15.017 32.5959 15.3899 32.1235 15.3899Z"
					fill="white"></path>
			</svg>
		</div>
		<label class="flex items-center cursor-pointer">
			<input
				id="mapModeToggle"
				type="checkbox"
				value="generate"
				class="sr-only peer"
			/>
			<div
				class="relative w-[46px] h-6 sm:w-[81px] sm:h-[45px] bg-primary shadow-cloud rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[3px] sm:after:top-[5px] sm:after:start-[6px] after:bg-white after:rounded-full after:w-5 after:h-5 sm:after:h-[35px] sm:after:w-[35px] after:transition-all"
			>
			</div>
			<span
				class="sr-only ms-3 text-sm font-medium text-gray-900 dark:text-gray-300"
				>Generate new cells mode toggle</span
			>
		</label>
	</div>
</div>

<script>
	import "ol/ol.css"; // Import OpenLayers CSS
	import { Map, View } from "ol";
	import TileLayer from "ol/layer/Tile";
	import XYZ from "ol/source/XYZ";
	import OverviewMap from "ol/control/OverviewMap";
	import { toLonLat, fromLonLat } from "ol/proj";
	import * as d3 from "d3";
	import { defaults as defaultControls } from "ol/control";
	import { Vector as VectorLayer } from "ol/layer";
	import { Vector as VectorSource } from "ol/source";
	import { GeoJSON } from "ol/format";
	import { Style, Stroke } from "ol/style";
	import * as turf from "@turf/turf";
	import Fill from "ol/style/Fill";
	import { pointerMove } from "ol/events/condition";
	import Select from "ol/interaction/Select";
	import { easeOut } from "ol/easing.js";

	const points = [];

	let generateMode = false;

	const toggleMapMode = () => {
		generateMode = !generateMode;
	};

	const mapModeToggle = document.getElementById("mapModeToggle");

	mapModeToggle.addEventListener("change", toggleMapMode);

	// tile url
	// /tiles/${tileZ}/${tileX / tileSize}_${tileY / tileSize}.png

	const tileLayer = new TileLayer({
		source: new XYZ({
			url: "https://storage.googleapis.com/fairclouds_tiles/tiles/{z}/{x}_{y}.png", // Path to your tiles
			maxZoom: 12, // Adjust based on the max zoom level available in your tiles
			minZoom: 2,
			tileSize: [256, 256], // Size of your tiles, typically 256x256 or 512x512
			// Optionally define the extent and projection if necessary
			wrapX: false,
		}),
	});

	// Define the map with the XYZ tile source
	const map = new Map({
		target: "map",
		layers: [
			new TileLayer({
				source: new XYZ({
					url: "https://storage.googleapis.com/fairclouds_tiles/tiles_v2/{z}/{x}_{y}.png", // Path to your tiles
					maxZoom: 12, // Adjust based on the max zoom level available in your tiles
					minZoom: 2,
					tileSize: [256, 256], // Size of your tiles, typically 256x256 or 512x512
					wrapX: false,
					projection: "EPSG:3857", // Ensure the projection is set correctly
				}),
			}),
		],
		view: new View({
			center: [0, 0], // Adjust based on your map's center
			zoom: 2, // Initial zoom level to fit the specific area
			maxZoom: 12, // Maximum zoom level, should match maxZoom in XYZ source
			minZoom: 2,
			extent: [-20037508.34, -14537508.34, 20037508.34, 12537508.34],
		}),
		controls: defaultControls({ zoom: false }), // Disable zoom controls
	});

	// Add a minimap (OverviewMap control)
	const overviewMapControl = new OverviewMap({
		className: "ol-overviewmap ol-custom-overviewmap",
		layers: [
			new TileLayer({
				source: new XYZ({
					url: "https://storage.googleapis.com/fairclouds_tiles/tiles_v2/{z}/{x}_{y}.png", // Path to your tiles
					maxZoom: 12, // Adjust based on the max zoom level available in your tiles
					minZoom: 2,
					tileSize: [256, 256], // Size of your tiles, typically 256x256 or 512x512
					// Optionally define the extent and projection if necessary
					wrapX: false,
				}),
			}),
		],
		view: new View({
			center: [0, 0],
			zoom: 2,
			maxZoom: 2,
			extent: [-20037508.34, -20037508.34, 20037508.34, 20037508.34],
		}),
		collapsible: false,
	});
	map.addControl(overviewMapControl);

	fetch("/outline.geojson")
		.then((response) => response.json())
		.then((outline) => {
			const poly = turf.polygon(outline.features[0].geometry.coordinates);

			function generateRandomPoint(bbox) {
				const [minX, minY, maxX, maxY] = bbox;
				const longitude = minX + Math.random() * (maxX - minX);
				const latitude = minY + Math.random() * (maxY - minY);
				return [longitude, latitude];
			}

			// Generate 3000 random geographic points inside the polygon
			const bbox = turf.bbox(outline);
			const points = [];
			while (points.length < 3000) {
				const point = generateRandomPoint(bbox);
				if (turf.booleanPointInPolygon(turf.point(point), poly)) {
					points.push(turf.point(point));
				}
			}

			// Create Voronoi diagram
			const pointsCollection = turf.featureCollection(points);
			let voronoi = turf.voronoi(pointsCollection, { bbox });

			function getRandomOpacity() {
				return Math.random() * 0.5 + 0.1;
			}

			// Add opacity to Voronoi cell properties
			voronoi.features.forEach((cell) => {
				cell.properties = cell.properties || {};
				cell.properties.opacity = getRandomOpacity();
			});

			// Clip Voronoi cells to the GeoJSON polygon
			const clippedVoronoi = voronoi.features
				.map((cell) => {
					const intersection = turf.intersect(
						turf.featureCollection([cell, poly]),
					);
					if (intersection) {
						intersection.properties = { ...cell.properties }; // Preserve the opacity property
						return intersection;
					}
					return null;
				})
				.filter(Boolean);

			// Step 1: Calculate the center of the map
			const mapCenter = turf.centroid(poly).geometry.coordinates;

			// Step 2: Sort Voronoi cells by distance from the center
			const sortedVoronoi = clippedVoronoi.sort((a, b) => {
				const aCenter = turf.centroid(a).geometry.coordinates;
				const bCenter = turf.centroid(b).geometry.coordinates;
				const aDistance = turf.distance(mapCenter, aCenter);
				const bDistance = turf.distance(mapCenter, bCenter);
				return aDistance - bDistance;
			});

			// Convert clipped Voronoi cells to a format that OpenLayers can use
			const voronoiSource = new VectorSource();

			const voronoiStyle = (feature) => {
				const opacity = feature.get("opacity");
				return new Style({
					fill: new Fill({
						color: `rgba(255, 255, 255, ${opacity})`,
					}),
				});
			};

			// Ease-out circular function
			const ease = (t) => 1 - Math.pow(1 - t, 3);

			// Step 3: Gradually add cells to the map with ease-out circular easing
			let index = 0;
			const totalCells = sortedVoronoi.length;
			const duration = 2000; // Total duration in milliseconds
			let startTime;

			const addCells = (currentTime) => {
				if (!startTime) {
					startTime = currentTime;
				}
				const elapsedTime = currentTime - startTime;
				const progress = Math.min(elapsedTime / duration, 1);
				const easedProgress = ease(progress);
				const targetIndex = Math.floor(easedProgress * totalCells);

				while (index < targetIndex && index < totalCells) {
					const cell = sortedVoronoi[index];
					const feature = new GeoJSON().readFeature(cell, {
						featureProjection: "EPSG:3857",
					});
					voronoiSource.addFeature(feature);
					index++;
				}

				if (index < totalCells) {
					requestAnimationFrame(addCells);
				}
			};

			// Delay the start of the animation by 500 milliseconds
			setTimeout(() => {
				requestAnimationFrame(addCells);
			}, 500);

			// Add the voronoiSource to the map
			const voronoiLayer = new VectorLayer({
				source: voronoiSource,
				style: voronoiStyle,
				renderBuffer: 1000,
				updateWhileInteracting: true,
			});
			map.addLayer(voronoiLayer);

			// Create a highlight style for hover
			const highlightStyle = new Style({
				fill: new Fill({
					color: "rgba(255, 255, 255, 0.9)", // Yellow fill with 50% opacity
				}),
				stroke: new Stroke({
					color: "rgba(0, 0, 0, 0.5)",
					width: 1,
				}),
			});

			// Add select interaction for hover
			const selectHover = new Select({
				condition: pointerMove,
				style: highlightStyle,
			});

			map.addInteraction(selectHover);

			// Add event listener to capture mouse position and add new Voronoi cell
			// map.on("click", (event) => {
			// 	const coordinate = map.getEventCoordinate(event.originalEvent);
			// 	const lonLat = toLonLat(coordinate); // Transform to EPSG:4326
			// 	const point = turf.point(lonLat);

			// 	// Check if the point is inside the polygon
			// 	if (turf.booleanPointInPolygon(point, poly)) {
			// 		console.log(point);

			// 		points.push(point);

			// 		// // Update Voronoi diagram with the new point
			// 		const pointsCollection = turf.featureCollection(points);
			// 		voronoi = turf.voronoi(pointsCollection, { bbox });

			// 		// // Add opacity to new Voronoi cell properties
			// 		voronoi.features.forEach((cell) => {
			// 			cell.properties = cell.properties || {};
			// 			cell.properties.opacity = getRandomOpacity();
			// 		});

			// 		// // Clip Voronoi cells to the GeoJSON polygon
			// 		const newClippedVoronoi = voronoi.features
			// 			.map((cell) => {
			// 				const intersection = turf.intersect(
			// 					turf.featureCollection([cell, poly]),
			// 				);
			// 				if (intersection) {
			// 					intersection.properties = { ...cell.properties }; // Preserve the opacity property
			// 					return intersection;
			// 				}
			// 				return null;
			// 			})
			// 			.filter(Boolean);

			// 		// // Update Voronoi source with new features
			// 		voronoiSource.clear();

			// 		// Create a GeoJSON FeatureCollection from newClippedVoronoi
			// 		const featureCollection = {
			// 			type: "FeatureCollection",
			// 			features: newClippedVoronoi,
			// 		};

			// 		// Read features from the FeatureCollection
			// 		const newFeatures = new GeoJSON().readFeatures(featureCollection, {
			// 			featureProjection: "EPSG:3857",
			// 		});

			// 		// Add the new features to the voronoiSource
			// 		voronoiSource.addFeatures(newFeatures);
			// 	}
			// });
		});

	// Add custom zoom buttons
	const zoomInButton = document.getElementById("zoomInButton");
	const zoomOutButton = document.getElementById("zoomOutButton");

	zoomInButton.addEventListener("click", () => {
		zoomTo(+1);
	});

	zoomOutButton.addEventListener("click", () => {
		zoomTo(-1);
	});

	function zoomTo(amount) {
		const view = map.getView();
		const zoom = view.getZoom();
		view.animate({ duration: 250, easing: easeOut, zoom: zoom + amount });
	}
</script>
