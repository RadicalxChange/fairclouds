---
// dont prerender this component as we need to get fresh data from the api.
export const prerender = false;

import directus from "../lib/directus";
import { readItems } from "@directus/sdk";

const polygons = await directus.request(
	readItems("polygons", {
		fields: ["id", "location", "price", { licenses: ["id"] }],
	}),
);

// intersection of a point with drawing polygons
// const intersects = await directus.request(
// 	readItems("drawings", {
// 		fields: ["*"],
// 		filter: {
// 			area: {
// 				_intersects: {
// 					type: "Feature",
// 					properties: {},
// 					geometry: {
// 						coordinates: [-66.09679179594478, -23.722487874932185],
// 						type: "Point",
// 					},
// 				},
// 			},
// 		},
// 	}),
// );
// console.log("INTERSECTION");
// console.log(intersects);

// intersection of a polygon with drawing polygons
// const response = await directus.items("Land").readByQuery({
// 	limit: 100,
// 	fields: ["id", "name", "center", "geometry"],
// 	filter: {
// 		center: {
// 			_intersects: {
// 				type: "Feature",
// 				geometry: {
// 					coordinates: [
// 						[
// 							[168.2947501099543, -17.723682144590242],
// 							[168.2947501099543, -17.727328428851507],
// 							[168.29840874403044, -17.727328428851507],
// 							[168.29840874403044, -17.723682144590242],
// 							[168.2947501099543, -17.723682144590242],
// 						],
// 					],
// 					type: "Polygon",
// 				},
// 			},
// 		},
// 	},
// });
---

<div
	class="w-full h-screen flex flex-col bg-blue-100 items-center justify-center"
>
	<canvas class="w-screen h-screen" id="chart"></canvas>
	<!-- <a class="bg-grey rounded-full px-6 py-2" href="/checkout">Checkout</a> -->
</div>

<script>
	// fetch data from api

	// create map
	import * as d3 from "d3";

	const canvas = document.getElementById("chart");
	const svgUrl: string = "/zoom-depth-test-small.svg"; // Replace with the actual path to your SVG file

	const context: CanvasRenderingContext2D | null = canvas.getContext("2d");
	const img: HTMLImageElement = new Image();
	canvas.width = canvas.offsetWidth; // Set canvas width
	canvas.height = canvas.offsetHeight; // Set canvas height

	const points = [
		[100, 100],
		[200, 200],
		[300, 300],
	]; // Example points

	const voronoi = d3.Delaunay.from(points).voronoi([
		0,
		0,
		canvas.width,
		canvas.height,
	]);

	// Function to convert SVG to Canvas
	async function loadSvgToCanvas(svgUrl, canvas) {
		const response = await fetch(svgUrl);
		const svgText = await response.text();

		const svgBlob = new Blob([svgText], {
			type: "image/svg+xml;charset=utf-8",
		});
		const url = URL.createObjectURL(svgBlob);

		img.onload = function () {
			canvas.getContext("2d").drawImage(img, 0, 0);
			URL.revokeObjectURL(url);
		};

		img.src = url;
	}

	loadSvgToCanvas(svgUrl, canvas);

	// Setup zoom behavior
	const zoom = d3
		.zoom()
		.scaleExtent([1, 800]) // Zoom limits
		.on("zoom", (event) => {
			const transform = event.transform;

			// Clear the canvas
			context.clearRect(0, 0, canvas.width, canvas.height);

			// Apply the transformation
			context.save(); // Save the current context state
			context.translate(transform.x, transform.y); // Apply translation
			context.scale(transform.k, transform.k); // Apply scale

			// Draw the image at (0, 0) since the transformation is already applied
			context.drawImage(img, 0, 0, canvas.width, canvas.height);

			// Draw Voronoi cells
			context.beginPath();
			voronoi.render(context);
			context.strokeStyle = "rgba(255, 0, 0, 0.5)"; // Example: red lines for Voronoi edges
			context.stroke();

			context.restore(); // Restore the context to its original state
		});

	// Apply zoom behavior to the canvas
	d3.select(canvas).call(zoom);
</script>
