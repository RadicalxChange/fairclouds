---
// dont prerender as this page will be unique.
export const prerender = false;

import Layout from "../../layouts/Layout.astro";
import Stripe from "stripe";
import directus from "../../lib/directus";
import { directusAdmin } from "../../lib/directus";
import { readItems, createItem } from '@directus/sdk';

const stripe = new Stripe(import.meta.env.STRIPE_KEY);
const sessionID = Astro.url.searchParams.get("session_id");

let name, email, errorMessage = "";
let cycle,
    session,
    user_id,
    license_data,
    parsedLicenseData;

if (sessionID !== null) {

  // Get the current cycle
  try {
    const result = await directus.request(
      readItems("cycles", {
        fields: ["*"],
        filter: {
          status: {
            _eq: "published", // Filter where status equals "Published"
          },
        },
        sort: ["-id"], // Sort by id in descending order
        limit: 1, // Retrieve only the first result (highest id)
      })
    );
    cycle = result[0]
  } catch (e) {
    console.error("Error loading current cycle:", e);
  }

  // Process checkout session
  try {
    session = await stripe.checkout.sessions.retrieve(sessionID);
    if (session.customer_details !== null) {
      ({ name, email } = session.customer_details);
      ({ user_id, license_data } = session.metadata || {});
      parsedLicenseData = license_data ? JSON.parse(license_data) : [];
    } else {
      // Handle the case where customer_details is null
      console.error("customer_details is null");
      errorMessage = "We were unable to retrieve your customer details. Please contact support.";
    }
  } catch (e) {
    console.error("Error during checkout processing:", e);

    // Customize the error message based on the error type
    if (e.code === "resource_missing") {
      errorMessage = "Your checkout session could not be found. Please try again.";
    } else if (e.code === "validation_error") {
      errorMessage = "There was an issue validating your purchase. Please contact support.";
    } else {
      errorMessage = "An unexpected error occurred. Please try again later.";
    }
  }

  if (user_id && parsedLicenseData?.length > 0) {
    // Mark prices as stewarded in Stripe to take them off the market
    try {
      await Promise.all(
        parsedLicenseData.map((data) =>
          stripe.prices.update(data.price_id, {
            metadata: { isStewarded: "true" },
          })
        )
      );
    }
    catch (e) {
      console.error("Error updating price metadata", e);
    }

    // Create licenses in the database
    try {
      // Check if licenses have already been created for this checkout session
      const existingLicenses = await directusAdmin.request(
        readItems("licenses", {
          filter: {
            checkout_session_id: {
              _eq: session.id,
            },
          },
        })
      );

      if (existingLicenses.length === 0) {
        // Update the database on successful checkout
        const newLicenses = parsedLicenseData.map((data) => ({
          cloud_id: data.cloud_id,
          steward: user_id,
          cycle_id: cycle.id,
          price_id: data.price_id,
          tier: data.tier,
          active: true,
          checkout_session_id: session.id,
        }));

        // Batch create new licenses
        const result = await directusAdmin.request(createItem('licenses', newLicenses));
        console.log("Created new licenses:", result);
      } else {
        console.log("Licenses have already been created for this checkout session:", existingLicenses);
      }
    } catch (e) {
      console.error("Error creating licenses:", e);
    }
  }

// Handle the case where sessionID is null
} else {
  console.error("sessionID is null");
  errorMessage = "Invalid session ID. Please try again.";
}
---

<Layout title="Thank you ☁️ Fairclouds">
  <div class="p-4">
    {errorMessage ? (
      <div>
        <h2>Oops!</h2>
        <p>{errorMessage}</p>
      </div>
    ) : (
      <div>
        <h1>Thank you for your purchase, {name}!</h1>
        <p>We've sent a receipt to {email}.</p>
      </div>
    )}
  </div>

  <!-- Clear cart on client  -->
  <script>
    import { clearCart } from "../../cartStore";
    
    clearCart();
  </script>
</Layout>
