---
// dont prerender as this page will be unique.
export const prerender = false;

import Layout from "../../layouts/Layout.astro";
import Stripe from "stripe";
import { sendMail } from "../../utils/send-mail"
import { directusAdmin } from "../../lib/directus";
import { readItems, createItem, updateItem, updateUser } from '@directus/sdk';
import { getLangFromUrl } from "../../i18n/utils";

const {
  STRIPE_KEY,
  LICENSE_TAKEN_OVER_EMAIL_TEMPLATE,
  ESP_LICENSE_TAKEN_OVER_EMAIL_TEMPLATE,
  PURCHASE_CONFIRM_EMAIL_TEMPLATE,
  ESP_PURCHASE_CONFIRM_EMAIL_TEMPLATE,
  PUBLIC_BASE_URL
} = import.meta.env;

const stripe = new Stripe(STRIPE_KEY);
const sessionID = Astro.url.searchParams.get("session_id");

const lang = getLangFromUrl(Astro.url);

let name, email, errorMessage = "";
let session,
    user_id,
    user_credits,
    otherMetadata,
    parsedLicenseData,
    resultLicenses,
    checkoutIsProcessed;

if (sessionID !== null) {
  // Process checkout session
  try {
    session = await stripe.checkout.sessions.retrieve(sessionID);
    if (session.customer_details !== null) {
      ({ name, email } = session.customer_details);
      ({ user_id, user_credits, ...otherMetadata } = session.metadata || {});
      
      const licenseMetadata = Object.entries(otherMetadata)
        .filter(([key]) => key.startsWith('license_'))
        .map(([, value]) => {
          try {
            return JSON.parse(value as string);
          } catch (error) {
            console.error(`Error parsing license data: ${error}`);
            return null;
          }
        })
        .filter(license => license !== null);

      parsedLicenseData = licenseMetadata || [];
    } else {
      // Handle the case where customer_details is null
      console.error("customer_details is null");
      errorMessage = "We were unable to retrieve your customer details. Please contact support.";
    }
  } catch (e) {
    console.error("Error during checkout processing:", e);

    // Customize the error message based on the error type
    if (e.code === "resource_missing") {
      errorMessage = "Your checkout session could not be found. Please try again. If the issue persists, contact support.";
    } else if (e.code === "validation_error") {
      errorMessage = "There was an issue validating your purchase. Please contact support.";
    } else {
      errorMessage = "An unexpected error occurred. Please try again later. If the issue persists, contact support.";
    }
  }

  if (user_id && parsedLicenseData?.length > 0) {
    // Mark prices as stewarded in Stripe.
    try {
      await Promise.all(
        parsedLicenseData.map((data) =>
          stripe.prices.update(data.stripe_price_id, {
            metadata: { isStewarded: "true" },
          })
        )
      );
    }
    catch (e) {
      console.error("Error updating price metadata", e);
    }

    // Create licenses in the database
    try {
      // Check if licenses have already been created for this checkout session
      const existingLicenses = await directusAdmin.request(
        readItems("licenses", {
          filter: {
            checkout_session_id: {
              _eq: session.id,
            },
          },
        })
      );
      checkoutIsProcessed = existingLicenses.length !== 0

      if (!checkoutIsProcessed) {
        // Update the database on successful checkout
        const newLicenses = parsedLicenseData.map((data) => ({
          steward: user_id,
          price_id: data.directus_price_id,
          checkout_session_id: session.id,
        }));

        // Batch create new licenses
        resultLicenses = await directusAdmin.request(createItem('licenses', newLicenses, {
          fields: [
            "*",
            "price_id.id",
            "price_id.amount",
            "price_id.cloud_id.id",
            "price_id.cloud_id.name",
            "price_id.tier",
            "price_id.cycle_id.id",
            "price_id.cycle_id.renewal_active",
          ]
        }));
        console.log("Created new licenses:", resultLicenses);

      } else {
        console.log("Licenses have already been created for this checkout session:", existingLicenses);
      }
    } catch (e) {
      console.error("Error creating licenses:", e);
    }

    if (!checkoutIsProcessed) {
      // If the new steward used Cloudsteward Credits, update their credit balance in the Directus db.
      if (session.total_details.amount_discount && session.total_details.amount_discount !== 0) {
        try {
          console.log("Steward " + user_id + " redeemed " + session.total_details.amount_discount + " Cloudsteward Credits. Updating Directus db...")

          const result = await directusAdmin.request(updateUser(user_id, {
            credits: Math.max(user_credits - session.total_details.amount_discount, 0),
          }));
        } catch (e) {
          console.error("Error updating new steward credit balance:", e);
        }
      }

      // Handle license post-processing (i.e. renewals, takeovers, credit distributions).

      let newPriceData = []; // Holds data for us to create new prices with if necessary.

      try {
        await Promise.all(
          resultLicenses.map(async (newLicense) => {
            const relatedPricesResult = await directusAdmin.request(
              readItems("price", {
                fields: [
                  "*",
                  "cloud_id.id",
                  "cloud_id.name",
                  "cloud_id.drawings",
                  "cycle_id.id",
                  "cycle_id.name",
                  "cycle_id.start_date",
                  "cycle_id.end_date",
                  "cycle_id.prices_status",
                  "cycle_id.renewal_active",
                  "licenses.id",
                  "licenses.steward",
                  "licenses.steward.id",
                  "licenses.steward.first_name",
                  "licenses.steward.email",
                  "licenses.steward.credits",
                ],
                filter: {
                  cloud_id: { _eq: newLicense.price_id.cloud_id.id },
                  licenses: { _some: {} },
                  cycle_id: {
                    _or: [
                      { id: { _eq: newLicense.price_id.cycle_id.id } },
                      { renewal_active: { _eq: true } },
                    ]
                  }
                },
              })
            );

            // Distribute Cloudsteward Credits to higher-tier stewards.
            try {
              if (newLicense.price_id.tier > 1) {
                const higherTierPrices = relatedPricesResult.filter((price) => 
                  price.cycle_id.id === newLicense.price_id.cycle_id.id &&
                    price.tier < newLicense.price_id.tier
                );

                const basePrice = higherTierPrices.find((price) => price.tier === 1);
                const creditAward = Math.round(((parseFloat(newLicense.price_id.amount) - parseFloat(basePrice.amount)) * 100) / higherTierPrices.length);
                await Promise.all(
                  higherTierPrices.map(async (price) => {
                    if (price.licenses.length !== 0) {
                      // Award the higher-tier steward Cloudsteward Credits.
                      const higherTierSteward = price.licenses[0].steward;
                      console.log("Awarding " + creditAward + " Cloudsteward Credits to higher-tier steward: " + higherTierSteward.id)

                      try {
                        const result = await directusAdmin.request(updateUser(higherTierSteward.id, {
                          credits: higherTierSteward.credits + creditAward,
                        }));
                      } catch (e) {
                        console.error(`Error awarding Cloudsteward Credits to higher-tier steward ${higherTierSteward.id}:`, e);
                      }
                    }
                  })
                );
              }
            } catch (e) {
              console.error(`Error awarding Cloudsteward Credits to higher-tier stewards:`, e);
            }

            // Handle license renewal / takeover (claim).
            const prevPrice = relatedPricesResult.find((price) => (
              price.cycle_id.renewal_active &&
                price.tier === newLicense.price_id.tier &&
                price.id !== newLicense.price_id.id
            ));
            
            if (prevPrice && prevPrice.licenses.length !== 0) {
              const prevLicense = prevPrice.licenses[0];
              const prevSteward = prevLicense.steward;
              // Check if license was claimed or renewed
              if (prevSteward.id !== user_id) {
                // Mark license as claimed
                try {
                  await directusAdmin.request(updateItem('licenses', prevLicense.id, {
                    claimed: true,
                  }));
                } catch (e) {
                  console.error("Error marking previous license as claimed:", e);
                }
                // Award the former steward Cloudsteward Credits equal to 50% of new license price.
                try {
                  const creditAward = Math.round((parseFloat(newLicense.price_id.amount) * 100) / 2);
                  console.log("awarding " + creditAward + " Cloudsteward Credits to former steward: " + prevSteward.id)

                  const result = await directusAdmin.request(updateUser(prevSteward.id, {
                    credits: prevSteward.credits + creditAward,
                  }));

                  const licenseData = {
                    cloud: prevPrice.cloud_id.name,
                    tier: prevPrice.tier,
                    cycle_id: prevPrice.cycle_id,
                  }

                  // Notify former steward with email
                  const emailData = {
                    "user_name": prevSteward.name,
                    "license": licenseData,
                    "credits_awarded": (creditAward / 100).toFixed(2),
                    "credit_balance": (result.credits / 100).toFixed(2),
                  };
                  const template = lang === "en" ? LICENSE_TAKEN_OVER_EMAIL_TEMPLATE : ESP_LICENSE_TAKEN_OVER_EMAIL_TEMPLATE
                  await sendMail(prevSteward.email, template, emailData);
                } catch (e) {
                  console.error("Error awarding credits to former steward:", e);
                }
              } else {
                // Mark license as renewed...
                try {
                  // ...in the database...
                  await directusAdmin.request(updateItem('licenses', prevLicense.id, {
                    renewed: true,
                  }));
                  // ...and in the resultLicenses array, for use in the confirmation email.
                  newLicense.renewed = true;
                } catch (e) {
                  console.error("Error marking previous license as renewed:", e);
                }
              }
            }

            // If this was the last available active price for this cloud, mint a new license.
            const thisCycle = newLicense.price_id.cycle_id;

            if (thisCycle.prices_status !== "inactive") {
              const thisCyclePrices = relatedPricesResult.filter((price) => 
                  price.cycle_id.id === thisCycle.id
              );

              if (!thisCyclePrices.find(price => price.licenses.length === 0)) {
                
                const basePrice = thisCyclePrices.find(price => price.tier === 1);
                
                let nextTier = thisCyclePrices.length + 1;
                const nextIndex = thisCyclePrices.sort((a,b) => a.tier - b.tier).findIndex((x,i) => x.tier !== i+1);
                
                if (nextIndex !== -1) {
                  nextTier = nextIndex + 1
                }

                if (basePrice) {
                  newPriceData.push({
                    base_price: basePrice,
                    tier: nextTier,
                    num_drawings: basePrice.cloud_id.drawings.length,
                  });
                }
              }
            }
            // Save any updates to the object in the resultLicenses array.
            return newLicense;
          })
        );

        // Create new renewal prices if necessary.
        if (newPriceData.length !== 0) {
          try {
            const response = await fetch(PUBLIC_BASE_URL + "/api/create-prices", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                data: newPriceData,
              }),
            });

            if (!response.ok) {
              throw new Error("Network response was not ok");
            }

            const data = await response.json();
            console.log("Created new prices:", data.prices);

          } catch (error) {
            console.error("Failed to create new prices:", error);
          }
        }
      } catch (e) {
        console.error("Error in license post-processing:", e);
      }

      const licenseMailData = resultLicenses.map(license => {
        return {
          cloud: license.price_id.cloud_id.name,
          tier: license.price_id.tier,
          price: license.price_id.amount,
          renewed: license.renewed,
        }
      });

      // Send confirmation email to new steward
      const emailData = {
        "user_name": name,
        "licenses": licenseMailData,
      };
      const template = lang === "en" ? PURCHASE_CONFIRM_EMAIL_TEMPLATE : ESP_PURCHASE_CONFIRM_EMAIL_TEMPLATE
      await sendMail(email, template, emailData);
    }
  }

// Handle the case where sessionID is null
} else {
  console.error("sessionID is null");
  errorMessage = "Invalid session ID. Please try again.";
}
---

<Layout title="Thank you ☁️ Fairclouds">
  <div class="p-4">
    {errorMessage ? (
      <div>
        <h2>Oops!</h2>
        <p>{errorMessage}</p>
      </div>
    ) : (
      <div class="text-center">
        <div class="text-center space-y-8">
          <h1 class="text-3xl">Thank you for your purchase, {name}!</h1>
          <p>We've sent a receipt to {email}. View your cloud panel to download drawings!</p>
          <a class="button h-full" href="/en/cloud-panel"
            >View Cloud Panel
          </a>
        </div>
        <img src="/usage_all_white.png" alt="what to do with the drawings" class="mt-24 mx-auto max-w-[1000px]" />
        <a class="button mt-16" target="_blank" href={`/${lang}/faq/what-to-do-with-the-drawings`}>
          <span class="text-xl sm:text-3xl pt-[4px]">What to do with the drawings</span>
        </a>
      </div>
    )}
  </div>

  <!-- Clear cart on client  -->
  <script>
    import { clearCart } from "../../cartStore";
    
    clearCart();
  </script>
</Layout>
