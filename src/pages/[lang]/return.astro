---
// dont prerender as this page will be unique.
export const prerender = false;

import Layout from "../../layouts/Layout.astro";
import Stripe from "stripe";
import { directusAdmin } from "../../lib/directus";
import { readItems, createItem, updateItem, updateUser } from '@directus/sdk';

const stripe = new Stripe(import.meta.env.STRIPE_KEY);
const BASE_URL = import.meta.env.PUBLIC_BASE_URL
const sessionID = Astro.url.searchParams.get("session_id");

let name, email, errorMessage = "";
let session,
    user_id,
    user_credits,
    license_data,
    parsedLicenseData,
    resultLicenses,
    checkoutIsProcessed;

if (sessionID !== null) {

  // Process checkout session
  try {
    session = await stripe.checkout.sessions.retrieve(sessionID);
    if (session.customer_details !== null) {
      ({ name, email } = session.customer_details);
      ({ user_id, user_credits, license_data } = session.metadata || {});
      parsedLicenseData = license_data ? JSON.parse(license_data) : [];
    } else {
      // Handle the case where customer_details is null
      console.error("customer_details is null");
      errorMessage = "We were unable to retrieve your customer details. Please contact support.";
    }
  } catch (e) {
    console.error("Error during checkout processing:", e);

    // Customize the error message based on the error type
    if (e.code === "resource_missing") {
      errorMessage = "Your checkout session could not be found. Please try again.";
    } else if (e.code === "validation_error") {
      errorMessage = "There was an issue validating your purchase. Please contact support.";
    } else {
      errorMessage = "An unexpected error occurred. Please try again later.";
    }
  }

  if (user_id && parsedLicenseData?.length > 0) {
    // Mark prices as stewarded in Stripe to take them off the market
    try {
      await Promise.all(
        parsedLicenseData.map((data) =>
          stripe.prices.update(data.stripe_price_id, {
            metadata: { isStewarded: "true" },
          })
        )
      );
    }
    catch (e) {
      console.error("Error updating price metadata", e);
    }

    // Create licenses in the database
    try {
      // Check if licenses have already been created for this checkout session
      const existingLicenses = await directusAdmin.request(
        readItems("licenses", {
          filter: {
            checkout_session_id: {
              _eq: session.id,
            },
          },
        })
      );
      checkoutIsProcessed = existingLicenses.length !== 0

      if (!checkoutIsProcessed) {
        // Update the database on successful checkout
        const newLicenses = parsedLicenseData.map((data) => ({
          steward: user_id,
          price_id: data.directus_price_id,
          checkout_session_id: session.id,
        }));

        // Batch create new licenses
        resultLicenses = await directusAdmin.request(createItem('licenses', newLicenses, {
          fields: [
            "*",
            "price_id.id",
            "price_id.amount",
            "price_id.cloud_id",
            "price_id.tier",
            "price_id.cycle_id.id",
            "price_id.cycle_id.renewal_active",
          ]
        }));
        console.log("Created new licenses:", resultLicenses);

      } else {
        console.log("Licenses have already been created for this checkout session:", existingLicenses);
      }
    } catch (e) {
      console.error("Error creating licenses:", e);
    }

    if (!checkoutIsProcessed) {
      // If the new steward used Cloudkeeper Credits, update their credit balance in the Directus db.
      if (session.total_details.amount_discount && session.total_details.amount_discount !== 0) {
        try {
          console.log("Steward " + user_id + " redeemed " + session.total_details.amount_discount + " Cloudkeeper Credits. Updating Directus db...")

          const result = await directusAdmin.request(updateUser(user_id, {
            credits: Math.max(user_credits - session.total_details.amount_discount, 0),
          }));
        } catch (e) {
          console.error("Error updating new steward credit balance:", e);
        }
      }

      // Handle license renewal / takeover (claim).
      try {
        await Promise.all(
          resultLicenses.map(async (newLicense) => {
            const prevPriceResult = await directusAdmin.request(
              readItems("price", {
                fields: [
                  "*",
                  "cloud_id.id",
                  "cloud_id.name",
                  "cycle_id.id",
                  "cycle_id.name",
                  "cycle_id.start_date",
                  "cycle_id.end_date",
                  "licenses.id",
                  "licenses.steward",
                  "licenses.steward.id",
                  "licenses.steward.first_name",
                  "licenses.steward.email",
                  "licenses.steward.credits",
                ],
                filter: {
                  cloud_id: {
                    _eq: newLicense.price_id.cloud_id,
                  },
                  tier: {
                    _eq: newLicense.price_id.tier,
                  },
                  licenses: {
                    _some: {},
                  },
                  cycle_id: {
                    renewal_active: {
                      _eq: true,
                    }
                  }
                },
                limit: 1,
              })
            );
            const prevPrice = prevPriceResult[0];
            
            if (prevPrice && prevPrice.licenses.length !== 0) {
              const prevLicense = prevPrice.licenses[0]
              const prevSteward = prevLicense.steward;
              // Check if license was claimed or renewed
              if (prevSteward.id !== user_id) {
                // Mark license as claimed
                try {
                  await directusAdmin.request(updateItem('licenses', prevLicense.id, {
                    claimed: true,
                  }));
                } catch (e) {
                  console.error("Error marking previous license as claimed:", e);
                }

                // Award the former steward Cloudkeeper Credits equal to 50% of new license price.
                const creditAward = Math.round((parseFloat(newLicense.price_id.amount) * 100) / 2);
                console.log("awarding " + creditAward + " Cloudkeeper Credits to former steward: " + prevSteward.id)

                const result = await directusAdmin.request(updateUser(prevSteward.id, {
                  credits: prevSteward.credits + creditAward,
                }));

                // Notify former steward with email
                try {
                  console.log("notifying former steward via email...");
                  const response = await fetch(BASE_URL + "/api/send-mail", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                      email: prevSteward.email,
                      templateId: import.meta.env.LICENSE_TAKEN_OVER_EMAIL_TEMPLATE,
                      templateModel: {
                        "user_name": prevSteward.name,
                        "license": prevPrice,
                        "credits_awarded": (creditAward / 100).toFixed(2),
                        "credit_balance": (result.credits / 100).toFixed(2),
                      }
                    }),
                  });

                  if (!response.ok) {
                    throw new Error("Error sending email to former steward");
                  }
                } catch (e) {
                  console.error("Error sending email to former steward:", e);
                }
              } else {
                // Mark license as renewed
                try {
                  await directusAdmin.request(updateItem('licenses', prevLicense.id, {
                    renewed: true,
                  }));
                } catch (e) {
                  console.error("Error marking previous license as renewed:", e);
                }
              }
            }
          })
        );
      } catch (e) {
        console.error("Error awarding Cloudkeeper Credits to former steward(s):", e);
      }

      // Send confirmation email to new steward
      try {
        console.log("sending confirmation email...");
        const response = await fetch(BASE_URL + "/api/send-mail", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            email: email,
            templateId: import.meta.env.PURCHASE_CONFIRM_EMAIL_TEMPLATE,
            templateModel: {
              "user_name": name,
              "licenses": parsedLicenseData,
            }
          }),
        });

        if (!response.ok) {
          throw new Error("Error sending confirmation email");
        }
      } catch (e) {
        console.error("Error sending confirmation email:", e);
      }
    }
  }

// Handle the case where sessionID is null
} else {
  console.error("sessionID is null");
  errorMessage = "Invalid session ID. Please try again.";
}
---

<Layout title="Thank you ☁️ Fairclouds">
  <div class="p-4">
    {errorMessage ? (
      <div>
        <h2>Oops!</h2>
        <p>{errorMessage}</p>
      </div>
    ) : (
      <div class="space-y-4">
        <h1>Thank you for your purchase, {name}!</h1>
        <p>We've sent a receipt to {email}.</p>
        <p>Go to your dashboard to view your licenses and download cloud assets.</p>
        <div class="has-hint">
          <a class="button h-full" href="/en/dashboard"
            >Go to Dashboard
          </a>
        </div>
      </div>
    )}
  </div>

  <!-- Clear cart on client  -->
  <script>
    import { clearCart } from "../../cartStore";
    
    clearCart();
  </script>
</Layout>
