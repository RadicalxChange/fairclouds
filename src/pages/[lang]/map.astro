---
// Don't prerender as this page will be unique for each user.
export const prerender = false;

import Layout from "../../layouts/Layout.astro";
import MapComponent from "../../components/Map.svelte";
import { getLangFromUrl } from "../../i18n/utils";
import directus from "../../lib/directus";
import { readItems, withToken, readMe } from "@directus/sdk";
// import Timeline from "../../components/Timeline.astro";
import Cart from "../../components/Cart.svelte";
import { parse } from "cookie";

let currentUser = null;

// Read cookies from the incoming request
const cookies = parse(Astro.request.headers.get("cookie") || "");
const authToken = cookies.auth_token;

if (authToken) {
  try {
    currentUser = await directus.request(
      withToken(authToken,
        readMe({
          fields: [
            "*",
            "licenses.*",
            "licenses.price_id.id",
            "licenses.price_id.amount",
            "licenses.price_id.cloud_id",
            "licenses.price_id.cycle_id.id",
            "licenses.price_id.cycle_id.name",
            "licenses.price_id.cycle_id.start_date",
            "licenses.price_id.cycle_id.end_date",
            "licenses.price_id.cycle_id.prices_status",
            "licenses.price_id.cycle_id.renewal_active",
            "licenses.price_id.tier",
          ],
        })
      )
    );
  } catch (error) {
    console.error("Failed to fetch user or validate token:", error);
  }
}

const lang = getLangFromUrl(Astro.url);

const clouds = await directus.request(
  readItems("clouds", {
    fields: [
      "id",
      "name",
      "product_id",
      "x",
      "y",
      "width",
      "height",
      "drawings.id",
      "drawings.title",
      "drawings.image",
      "drawings.map_drawing",
      "drawings.author",
      "drawings.first_name",
      "drawings.last_name",
      "drawings.location",
      "prices.id",
      "prices.amount",
      "prices.cloud_id",
      "prices.cycle_id.id",
      "prices.cycle_id.name",
      "prices.cycle_id.start_date",
      "prices.cycle_id.end_date",
      "prices.cycle_id.prices_status",
      "prices.cycle_id.renewal_active",
      "prices.tier",
      "prices.price_id",
      "prices.licenses.id",
      "prices.licenses.steward",
      "prices.licenses.price_id",
    ],
  }),
);
---

<style>
  /* Disable vertical scrolling on the map */
  #map-container {
    height: 100vh;
    overflow-y: hidden;
  }
</style>

<Layout fixed={true} logoOnMobile={false} title="Fairclouds">
  <main id="map-container">
    <div
      class="hint absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50"
    >
      <span
        >Explore the cloudscape to discover the hidden drawings. Once uncovered,
        click to steward a cloud. As you return to a cloud, new drawings may
        appear.</span
      >
    </div>
    <div>
      <MapComponent lang={lang} clouds={clouds} currentUser={currentUser} client:load />
      <div
        class="flex fixed right-0 bottom-0 w-full gap-4 p-4 z-20 justify-between"
      >
        <!-- <Timeline /> -->
        <div class="has-hint">
          <a class="button h-full items-center justify-center" style="display: inline-flex;" target="_blank" href="https://cloudcities.org/draw"
            >Draw</a
          >
          <div role="tooltip" class="hint top-[0%] -mt-7 left-0 w-max">
            Contribute your own drawing
          </div>
        </div>

        <Cart lang={lang} currentUser={currentUser} client:load />
      </div>
    </div>
  </main>
</Layout>

<script>
  window.addEventListener("load", () => {
    const container = document.getElementById("map-container");
    if (!container) {
      console.error("Element with id 'map-container' not found.");
      return;
    }
    
    let lastTime = performance.now();
    const speed = 0.0025; // pixels per millisecond
    let accumulator = 0; // holds fractional pixels

    function autoPan(currentTime) {
      const delta = currentTime - lastTime;
      accumulator += delta * speed;
      
      // Only scroll when we have at least 1 full pixel accumulated.
      if (accumulator >= 1) {
        const scrollPixels = Math.floor(accumulator);
        container.scrollBy(scrollPixels, 0);
        accumulator -= scrollPixels;
      }
      
      lastTime = currentTime;
      requestAnimationFrame(autoPan);
    }
    
    requestAnimationFrame(autoPan);
  });
</script>