---
import { getLangFromUrl } from "../i18n/utils";
import Weather from "../components/Weather.astro";
import LoadingFallback from "../components/LoadingFallback.astro";
import ModeToggle from "../components/ModeToggle.astro";
import { Image } from "astro:assets";
import MenuContainer from "../components/MenuContainer.astro";
import logoEn from "../images/Fairclouds-Logo_EN.svg";
import logoEs from "../images/Fairclouds-Logo_ES.svg";
import logoEnBlack from "../images/Fairclouds-Logo_EN-black.svg";
import logoEsBlack from "../images/Fairclouds-Logo_ES-black.svg";
import "../styles/global.css"; // Import the global CSS file
import "../styles/modal.css";
import Account from "../components/Account.svelte";

interface Props {
	title: string;
	theme?: string;
	fixed?: boolean;
	logoOnMobile?: boolean;
}

const {
	title,
	theme = "blue",
	fixed = false,
	logoOnMobile = true,
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html
	lang={lang}
	class=`${theme == "blue" ? 'bg-primary text-white' : 'bg-white text-black'}`
>
	<head>
		<meta charset="UTF-8" />
		<meta
			name="description"
			content="Water and Life are Worth More than Lithium - El agua y la vida valen mÃ¡s que el litio"
		/>
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<header
			class=`${fixed ? 'fixed' : 'sticky'} top-0 left-0 p-4 w-full flex gap-4 justify-between items-start z-20`
		>
			<div class={!logoOnMobile && "hidden lg:block"}>
				<a href="/">
					{
						lang === "es" ? (
							<Image
								src={theme == "blue" ? logoEs : logoEsBlack}
								alt="Fairclouds logo"
								width="300"
								height="50"
							/>
						) : (
							<Image
								src={theme == "blue" ? logoEn : logoEnBlack}
								alt="Fairclouds logo"
								width="300"
								height="50"
							/>
						)
					}
				</a>
				<LoadingFallback>
					<p slot="fallback" class="opacity-0" aria-hidden>...</p>
					<Weather slot="content" />
				</LoadingFallback>
			</div>
			{
				theme == "blue" && (
					<div class="flex gap-4 items-center relative justify-between grow lg:grow-0">
						<ModeToggle theme={theme} />
						<div class="flex gap-4 items-center relative justify-between grow lg:grow-0">
							<MenuContainer theme={theme} />
							<Account client:load />
						</div>
					</div>
				)
			}
		</header>
		<slot />
		<script>
			const REFRESH_INTERVAL = 12 * 60 * 1000; // 12 minutes (directus token expiration is 15 minutes)

			const refreshToken = async () => {
				try {
					const response = await fetch('/api/refresh', { method: 'POST' });
					if (!response.ok) {
					throw new Error('Failed to refresh token');
					}
					const { message } = await response.json();
					console.log(message);
				} catch (err) {
					console.error('Token refresh error:', err);
				}
			};

			// Start auto-refreshing tokens
			setInterval(refreshToken, REFRESH_INTERVAL);
		</script>		  
	</body>
</html>
